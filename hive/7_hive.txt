-- Customer Info
CREATE TABLE customer_info (
  cust_id STRING,
  cust_name STRING,
  order_id STRING
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE;

-- Order Info
CREATE TABLE order_info (
  order_id STRING,
  item_id STRING,
  quantity INT
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE;

-- Item Info
CREATE TABLE item_info (
  item_id STRING,
  item_name STRING,
  item_price DOUBLE
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE;


LOAD DATA LOCAL INPATH '/home/user/customer.csv' INTO TABLE customer_info;
LOAD DATA LOCAL INPATH '/home/user/order.csv' INTO TABLE order_info;
LOAD DATA LOCAL INPATH '/home/user/item.csv' INTO TABLE item_info;


SELECT 
  c.cust_id,
  c.cust_name,
  i.item_name,
  o.quantity,
  i.item_price,
  o.quantity * i.item_price AS total_cost
FROM customer_info c
JOIN order_info o ON c.order_id = o.order_id
JOIN item_info i ON o.item_id = i.item_id;


CREATE INDEX cust_index ON TABLE customer_info (cust_id)
AS 'COMPACT' WITH DEFERRED REBUILD;



SELECT 
  SUM(o.quantity * i.item_price) AS total_sales,
  AVG(o.quantity * i.item_price) AS avg_sales
FROM order_info o
JOIN item_info i ON o.item_id = i.item_id;



SELECT 
  o.order_id,
  o.item_id,
  o.quantity,
  i.item_name,
  i.item_price,
  (o.quantity * i.item_price) AS total_cost
FROM order_info o
JOIN item_info i ON o.item_id = i.item_id
ORDER BY total_cost DESC
LIMIT 1;


create 'cust_info', 'info'

CREATE EXTERNAL TABLE hive_cust_info (
  rowkey STRING,
  cust_id STRING,
  cust_name STRING,
  order_id STRING
)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler'
WITH SERDEPROPERTIES (
  "hbase.columns.mapping" = ":key,info:cust_id,info:cust_name,info:order_id"
)
TBLPROPERTIES ("hbase.table.name" = "cust_info");


scan 'cust_info'
